{"version":3,"sources":["components/Blockquote/Blockquote.jsx","functions/getDisplayClassName.js","components/Button/Button.jsx","functions/generateRandomString.js","components/Tag/Tag.jsx","components/Form/Form.jsx","services/QuoteService.js","App.js","serviceWorker.js","index.js"],"names":["Blockquote","props","author","children","react_default","a","createElement","className","getDisplayClassName","component","color","variant","transformedColor","colorClassName","concat","Button","buttonClasses","rest","Object","objectWithoutProperties","buttonDisplayClassName","assign","classnames","defaultProps","generateRandomString","Math","random","toString","substring","Tag","inputName","isChecked","tagClasses","text","checkboxId","tagDisplayClassName","type","name","id","checked","htmlFor","Form","submitButtonColor","submitButtonText","submitButtonVariant","tagColor","tags","tagVariant","components_Button_Button","length","map","tag","tagInputName","replace","components_Tag_Tag","key","QuoteService","selectedTags","quotesData","_step","filteredQuotes","_iterator","_createForOfIteratorHelper","s","n","done","_step2","quote","value","_iterator2","indexOf","push","err","e","f","quoteArrayLength","floor","_step3","uniqueTags","_iterator3","_step4","_iterator4","App","_this","classCallCheck","this","_super","call","getFormDataObject","formData","data","App_createForOfIteratorHelper","keys","get","handleReset","setState","currentQuote","handleSubmit","event","preventDefault","FormData","target","getQuotesBySelectedTags","randomQuote","getRandomQuoteIndex","state","getUniqueTags","sort","_this$state","Fragment","components_Form_Form","onSubmit","onClick","components_Blockquote_Blockquote","index","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.274a77d7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Blockquote.css';\n\n/**\n * Appears as a raised card with the content of a given quote as\n * well as the quote's author\n */\nconst Blockquote = props => {\n    const { author, children } = props;\n    return (\n        <div className=\"Blockquote\">\n            <blockquote className=\"Blockquote__quotation\">\n                {children}\n            </blockquote>\n            <span className=\"Blockquote__author\">&mdash; {author}</span>\n        </div>\n    );\n};\n\nexport default Blockquote;\n\nBlockquote.propTypes = {\n    /** Author of the quote inserted with the `children` prop */\n    author: PropTypes.string.isRequired,\n    /** Content for the blockquote */\n    children: PropTypes.any.isRequired,\n};\n","/**\n * Get a CSS class based on the name of the component and the desired\n * color/variant. Uses BEM naming convention.\n *\n * @param {string} component Name of the component for the modifiers\n * @param {string} color Lowercase string for the color modifier\n * @param {string} variant Lowercase string for the variant modifier, is added to the end of the color modifier\n */\nconst getDisplayClassName = (component, color, variant) => {\n    const transformedColor = color === 'default' ? 'grey' : color;\n    const colorClassName = `${component}--${transformedColor}`;\n\n    if (variant && variant !== 'default') return `${colorClassName}--${variant}`;\n    return colorClassName;\n};\n\nexport default getDisplayClassName;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport getDisplayClassName from '../../functions/getDisplayClassName';\nimport './Button.css';\n\n/**\n * Button that uses the HTML `<button>` element as its base. Allows for a \n * color and variant from a set list to be provided.\n */\nconst Button = props => {\n    const { buttonClasses, children, color, variant, ...rest } = props;\n    const buttonDisplayClassName = getDisplayClassName('Button', color, variant); // Get CSS class for color and variant of the button\n\n    return (\n        <button className={classnames('Button', buttonDisplayClassName, buttonClasses)} {...rest}>\n            <span className=\"Button__label\">{children}</span>\n        </button>\n    );\n};\n\nexport default Button;\n\nButton.propTypes = {\n    /** Extra CSS classes to attach to the HTML `<button>` */\n    buttonClasses: PropTypes.string,\n    /** Content for the button */\n    children: PropTypes.any.isRequired,\n    /** Different colors for a button */\n    color: PropTypes.oneOf(['default', 'primary']),\n    /** Different variations of a given color scheme for a button */\n    variant: PropTypes.oneOf(['default', 'contained']),\n};\n\nButton.defaultProps = {\n    buttonClasses: '',\n    color: 'default',\n    variant: 'default',\n};\n","/**\n * Generate a random string of alphanumeric characters that\n * can be used as part of a unique key or id\n *\n * @author Xuejia Chen <570171025@qq.com>\n *\n * @see {@link https://gist.github.com/6174/6062387} for original answer\n */\nconst generateRandomString = () => {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n};\n\nexport default generateRandomString;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport generateRandomString from '../../functions/generateRandomString';\nimport getDisplayClassName from '../../functions/getDisplayClassName';\nimport './Tag.css';\n\n/**\n * Represents an attribute a quote can be labelled with. Allows for a \n * color and variant from a set list to be provided.\n */\nconst Tag = props => {\n    const { color, inputName, isChecked, tagClasses, text, variant } = props;\n    const checkboxId = `${inputName}_${generateRandomString()}`;\n    const tagDisplayClassName = getDisplayClassName('Tag', color, variant); // Get CSS class for color and variant of the tag\n\n    return (\n        <div className={classnames('Tag', tagDisplayClassName, tagClasses)}>\n            {isChecked ?\n            <input className=\"Tag__checkbox\" type=\"checkbox\" name={inputName} id={checkboxId} checked />\n            :\n            <input className=\"Tag__checkbox\" type=\"checkbox\" name={inputName} id={checkboxId} />}\n            <label className=\"Tag__button\" htmlFor={checkboxId}>\n                <span className=\"Tag__text\">\n                    {text}\n                </span>\n            </label>\n        </div>\n    );\n};\n\nexport default Tag;\n\nTag.propTypes = {\n    /** Color options for a tag */\n    color: PropTypes.oneOf(['default']),\n    /**\n     * Name for the checkbox HTML `<input />`, also used as part of an ID\n     * for the checkbox HTML `<input />`\n     */\n    inputName: PropTypes.string.isRequired,\n    /** Determines whether the checkbox is checked on page load */\n    isChecked: PropTypes.bool,\n    /** Extra CSS classes to attach to the containing HTML `<div>` */\n    tagClasses: PropTypes.string,\n    /** User-facing text for the tag */\n    text: PropTypes.string.isRequired,\n    /** Different variations of a given color scheme for a tag */\n    variant: PropTypes.oneOf(['default', 'outline']),\n};\n\nTag.defaultProps = {\n    color: 'default',\n    isChecked: false,\n    tagClasses: '',\n    variant: 'default',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Button/Button';\nimport Tag from '../Tag/Tag';\nimport generateRandomString from '../../functions/generateRandomString';\nimport './Form.css';\n\n/**\n * Form that provides interface for users to generate quotes and/or filter quotes to\n * generate by tag.\n */\nconst Form = props => {\n    const {\n        submitButtonColor,\n        submitButtonText,\n        submitButtonVariant,\n        tagColor,\n        tags,\n        tagVariant,\n        ...rest } = props;\n\n    return (\n        <form {...rest}>\n            <Button\n                color={submitButtonColor}\n                type=\"submit\"\n                variant={submitButtonVariant}\n            >\n                {submitButtonText}\n            </Button>\n            {tags.length > 0 ?\n            <div className=\"Form__inline-input-container\">\n                {tags.map((tag) => {\n                    const tagInputName = tag.replace(/\\s/g, ''); // Eliminate any spaces within the tag label\n                    return (\n                        <Tag\n                            color={tagColor}\n                            inputName={tagInputName}\n                            key={`tag_${generateRandomString()}`}\n                            tagClasses=\"Form__inline-input-container__input\"\n                            text={tag}\n                            variant={tagVariant}\n                        />\n                    );\n                })}\n            </div> : ''\n            }\n        </form>\n    );\n};\n\nexport default Form;\n\nForm.propTypes = {\n    /** \n     * Color of the submit button. \n     * Must match one of the options in the `PropTypes.oneOf()` array in `Button.jsx`\n     */\n    submitButtonColor: PropTypes.string,\n    /** Text for the submit button */\n    submitButtonText: PropTypes.string,\n    /** \n     * Variant of the submit button. \n     * Must match one of the options in the `PropTypes.oneOf()` array in `Button.jsx`\n     */\n    submitButtonVariant: PropTypes.string,\n    /** \n     * Color for each tag (available when the `tags` prop has at least one value). \n     * Must match one of the options in the `PropTypes.oneOf()` array in `Tag.jsx`\n     */\n    tagColor: PropTypes.string,\n    /** Array of tag labels */\n    tags: PropTypes.arrayOf(PropTypes.string),\n    /** \n     * Variant for each tag (available when the `tags` prop has at least one value). \n     * Must match one of the options in the `PropTypes.oneOf()` array in `Tag.jsx`\n     */\n    tagVariant: PropTypes.string,\n};\n\nForm.defaultProps = {\n    submitButtonColor: 'default',\n    submitButtonText: 'Submit',\n    submitButtonVariant: 'default',\n    tagColor: 'default',\n    tags: [],\n    tagVariant: 'default',\n};\n","import quotesData from '../data/quotes.json';\n\n/**\n * @classdesc Class with static methods for retrieving quotes, quote data, and tags.\n */\nclass QuoteService {\n    /**\n     * Filter for quotes labelled with tags selected by the user. Returns\n     * an array of quotes that contain at least one tag from the\n     * `selectedTags` array.\n     *\n     * @param {string[]} selectedTags List of tags selected by the user\n     */\n    static getQuotesBySelectedTags(selectedTags) {\n        if (selectedTags.length < 1) return quotesData; // Only filter results if any tags were selected\n\n        const filteredQuotes = [];\n\n        for (const quote of quotesData) {\n            for (const tag of quote.tags) {\n                if (selectedTags.indexOf(tag) > -1) { // Check if this tag matches one of the tags selected by the user\n                    filteredQuotes.push(quote); // If it does, push the `quote` into `filteredQuotes`\n                    break; // End the loop so the quote isn't added more than once\n                }\n            }\n        }\n\n        return filteredQuotes;\n    }\n\n    /**\n     * Returns a random number between `0` and the number of quotes to be picked from\n     * @param {number} quoteArrayLength Number of quotes that can be randomly picked from\n     */\n    static getRandomQuoteIndex(quoteArrayLength) {\n        return Math.floor(Math.random() * Math.floor(quoteArrayLength));\n    }\n\n    /**\n     * Returns an array of each unique instance of a tag from the source data\n     */\n    static getUniqueTags() {\n        const uniqueTags = [];\n\n        for (const quote of quotesData) {\n            for (const tag of quote.tags) {\n                if (uniqueTags.indexOf(tag) === -1) uniqueTags.push(tag); // Push tag into array if it isn't there already\n            }\n        }\n\n        return uniqueTags;\n    }\n}\n\nexport default QuoteService;\n","import React, { Component } from 'react';\nimport Blockquote from './components/Blockquote/Blockquote';\nimport Button from './components/Button/Button';\nimport Form from './components/Form/Form';\nimport QuoteService from './services/QuoteService';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentQuote: null,\n      tags: [],\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ tags: QuoteService.getUniqueTags().sort() }); // Get the tags for the user to pick from, sorted alphabetically\n  }\n\n  /**\n   * Returns the submitted `formData` as an object\n   */\n  getFormDataObject = formData => {\n    const data = {};\n    for (const key of formData.keys()) {\n      data[key] = formData.get(key);\n    }\n    return data;\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentQuote: null,\n    });\n  };\n  \n  handleSubmit = event => {\n    event.preventDefault(); // Prevent page from reloading\n    const data = this.getFormDataObject(new FormData(event.target));\n    const selectedTags = Object.keys(data);\n    const filteredQuotes = QuoteService.getQuotesBySelectedTags(selectedTags);\n    // Is either the single quote in `filteredQuotes` or a random quote if the length of `filteredQuotes` is larger than `1`\n    let randomQuote = filteredQuotes.length === 1 ? filteredQuotes[0] : filteredQuotes[QuoteService.getRandomQuoteIndex(filteredQuotes.length)];\n\n    this.setState({\n      currentQuote: {\n        author: randomQuote.author.name,\n        tags: randomQuote.tags,\n        text: randomQuote.text,\n      },\n    });\n  };\n\n  render() {\n    const { currentQuote, tags } = this.state;\n\n    return (\n      <React.Fragment>\n        {!currentQuote ?\n        <Form\n          className=\"container\"\n          onSubmit={this.handleSubmit}\n          submitButtonColor=\"primary\"\n          submitButtonText=\"Generate quote\"\n          submitButtonVariant=\"contained\"\n          tags={tags}\n          tagVariant=\"outline\"\n        /> : ''}\n        {currentQuote ?\n        <div className=\"container\">\n          <Button\n            buttonClasses=\"margin-bottom--sm\"\n            color=\"primary\"\n            onClick={this.handleReset}\n            type=\"reset\"\n          >\n            <span className=\"icon--lg margin-right--xs\">\n              &laquo;\n            </span>\n            Generate another\n          </Button>\n          <Blockquote author={currentQuote.author}>\n              {currentQuote.text}\n          </Blockquote>\n          {currentQuote.tags && currentQuote.tags.length > 0 ?\n          <React.Fragment>\n            <small className=\"color--grey font-size--sm margin-top--sm\">Tags for this quote:\n              {currentQuote.tags.map((tag, index) => {\n                // List tags for this quote, insert comma after each if not the last tag\n                return ` \"${tag}${(index + 1) !== currentQuote.tags.length ? '\", ' : '\"'}`;\n              })}\n            </small>\n          </React.Fragment> : ''}\n        </div> : ''}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}